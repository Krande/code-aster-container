waf [commands] [options]

Main commands (example: ./waf build -j4)
  build    : executes the build
  clean    : cleans the project
  configure: configures the project
  dist     : makes a tarball for redistributing the sources
  distcheck: checks if the project compiles (tarball from 'dist')
  distclean: removes build folders and data
  doc      : build the documentation files
  i18n     : build the i18n files
  install  : installs the targets on the system
  list     : lists the targets to execute
  reset_msg: Reset message level
  step     : executes tasks in a step-by-step fashion, for debugging
  test     : facility to execute a testcase
  uninstall: removes the targets installed

Environment variables:
  CC             : C compiler
  FC             : Fortran compiler
  CXX            : C++ compiler
  DEFINES        : extra preprocessor defines
  LINKFLAGS      : extra linker options
  CFLAGS         : extra C compilation options
  FCFLAGS        : extra Fortran compilation options
  LIBPATH_x, LIB_x, INCLUDES_x, PYPATH_x : paths for component "x" for libs, includes, python modules
  CONFIG_PARAMETERS_name=value: extra configuration parameters (for config.json)
  WAFBUILD_ENV   : environment file to be included in runtime environment file
  PREFIX         : default installation prefix to be used, if no --prefix option is given.
  ASTER_BLAS_INT_SIZE  : kind of integers to use in the fortran blas/lapack calls (4 or 8, default is 4)
  ASTER_MUMPS_INT_SIZE : kind of integers to use in the fortran mumps calls  (4 or 8, default is 4)
  CATALO_CMD     : command line used to build the elements catalog. It is just inserted before the executable (may define additional environment variables or a wrapper that takes all arguments, see catalo/wscript)

Options:
  --version             show program's version number and exit
  -c COLORS, --color=COLORS
                        whether to use colors (yes/no/auto) [default: auto]
  -j JOBS, --jobs=JOBS  amount of parallel jobs (12)
  -k, --keep            continue despite errors (-kk to try harder)
  -v, --verbose         verbosity level -v -vv or -vvv [default: 0]
  --zones=ZONES         debugging zones (task_gen, deps, tasks, etc)
  -h, --help            show this help message and exit

  Configuration options:
    -o OUT, --out=OUT   build dir for the project
    -t TOP, --top=TOP   src dir for the project
    --download          try to download the tools if missing
    --use-config=CFG    force the configuration parameters by importing CFG.py. Several modules may be
                        provided (comma separated).
    --use-config-dir=CFG_DIR
                        path or url where to find the configuration file
    --check-fortran-compiler=CHECK_FORTRAN_COMPILER
                        list of Fortran compiler to try [gfortran g95 ifort]
    --check-cxx-compiler=CHECK_CXX_COMPILER
                        list of C++ compilers to try [g++ clang++ icpc]
    --check-c-compiler=CHECK_C_COMPILER
                        list of C compilers to try [gcc clang icc]
    --with-data=WITH_DATA
                        location of the data repository (default: ../data)
    --with-validation=WITH_VALIDATION
                        location of the validation repository (default: ../validation)

  Build and installation options:
    -p, --progress      -p: progress bar; -pp: ide output
    --targets=TARGETS   task generators, e.g. "target1,target2"
    --fast              use fast algorithm based on modification time to check for dependencies of fortran
                        sources
    --safe              use safe algorithm based on content to check for implicit dependencies of fortran
                        sources

  Step options:
    --files=FILES       files to process, by regexp, e.g. "*/main.c,*/test/main.o"

  Installation and uninstallation options:
    -f, --force         force file installation
    --distcheck-args=ARGS
                        arguments to pass to distcheck

  Installation prefix:
    By default, "waf install" will put the files in "../install/std/bin", "../install/std/lib" etc. An
    installation prefix other than "../install/std" can be given using "--prefix", for example "--
    prefix=$HOME". Using 'waf_variant', 'std' will be automatically replaced by 'variant'.

    --destdir=DESTDIR   installation root [default: '']
    --exec-prefix=EXEC_PREFIX
                        installation prefix for binaries [PREFIX]
    --prefix=PREFIX     installation prefix [default: '../install/std']

  Installation directories:
    --bindir=BINDIR     user commands [EXEC_PREFIX/bin]
    --sbindir=SBINDIR   system binaries [EXEC_PREFIX/sbin]
    --libexecdir=LIBEXECDIR
                        program-specific binaries [EXEC_PREFIX/libexec]
    --sysconfdir=SYSCONFDIR
                        host-specific configuration [PREFIX/etc]
    --sharedstatedir=SHAREDSTATEDIR
                        architecture-independent variable data [PREFIX/com]
    --localstatedir=LOCALSTATEDIR
                        variable data [PREFIX/var]
    --libdir=LIBDIR     object code libraries [EXEC_PREFIX/lib]
    --includedir=INCLUDEDIR
                        header files [PREFIX/include]
    --oldincludedir=OLDINCLUDEDIR
                        header files for non-GCC compilers [/usr/include]
    --datarootdir=DATAROOTDIR
                        architecture-independent data root [PREFIX/share]
    --datadir=DATADIR   architecture-independent data [DATAROOTDIR]
    --infodir=INFODIR   GNU "info" documentation [DATAROOTDIR/info]
    --localedir=LOCALEDIR
                        locale-dependent data [DATAROOTDIR/locale]
    --mandir=MANDIR     manual pages [DATAROOTDIR/man]
    --docdir=DOCDIR     documentation root [DATAROOTDIR/doc/PACKAGE]
    --htmldir=HTMLDIR   HTML documentation [DOCDIR]
    --dvidir=DVIDIR     DVI documentation [DOCDIR]
    --pdfdir=PDFDIR     PDF documentation [DOCDIR]
    --psdir=PSDIR       PostScript documentation [DOCDIR]

  code_aster options:
    --enable-mpi        Build a parallel version with mpi (same as ENABLE_MPI environment variable)
    --enable-openmp     Build a parallel version supporting OpenMP
    --disable-openmp    Disable OpenMP
    -n TESTNAME, --name=TESTNAME
                        name of testcases to run (as_run must be in PATH)
    --outputdir=DIR     directory to store the output files. A default value can be stored in ~/.hgrc
                        under the section "aster"
    --exectool=EXECTOOL
                        run a testcase by passing additional arguments (possible values are "env" + those
                        defined in the configuration)
    --time_limit=TIME_LIMIT
                        override the time limit of the testcase
    --without-repo      build without the source repository
    -e, --build-executable
                        build aster as an executable: it is an alias for --embed-aster
    --embed-aster       embed all aster components within a python interpreter
    --shared-aster      build each aster component as a shared python module
    --disable-i18n      Disable I18N features
    --enable-i18n       Forces to fail if a tool is missing to install or build the i18n files
    --legacy            create some legacy files
    --nolegacy          do not create legacy files
    --singularity-image=SINGULARITYIMAGE
                        Singularity image used for executions
    --install-tests     install the testcases files
    -E, --embed-all     activate all embed-* options (except embed-python)
    --enable-all        activate all 'enable-*' options (same as ENABLE_ALL environment variable)

  Python Options:
    --nopyc             Do not install bytecode compiled .pyc files (configuration) [Default:install]
    --nopyo             Do not install optimised compiled .pyo files (configuration) [Default:install]
    --nopycache         Do not use __pycache__ directory to install objects [Default:auto]
    --python=PYTHON     python binary to be used [Default: /home/krande/mambaforge/envs/ca-dev/bin/python]
    --pythondir=PYTHONDIR
                        Installation path for python modules (py, platform-independent .py and .pyc files)
    --pythonarchdir=PYTHONARCHDIR
                        Installation path for python extension (pyext, platform-dependent .so or .dylib
                        files)

  Mathematics  libraries options:
    --maths-libs=MATHS_LIBS
                        Math librairies to link with like blas and lapack. Use None or "auto" to search
                        them automatically.
    --embed-maths       Embed math libraries as static library

  HDF5/Med libraries options:
    --med-libs=MED_LIBS
                        MED librairies to link against med
    --embed-med         Embed MED libraries as static library
    --disable-med       disable the MED support
    --enable-med        force the MED support
    --hdf5-libs=HDF5_LIBS
                        HDF5 librairies to link with
    --embed-hdf5        Embed HDF5 libraries as static library
    --disable-hdf5      disable the HDF5 and MED support
    --enable-hdf5       disable the HDF5 and MED support

  Metis library options:
    --disable-metis     Disable METIS support
    --enable-metis      Force METIS support
    --metis-libs=METIS_LIBS
                        metis librairies to use when linking
    --embed-metis       Embed METIS libraries as static library

  Parmetis library options:
    --disable-parmetis  Disable PARMETIS support
    --enable-parmetis   Force PARMETIS support
    --parmetis-libs=PARMETIS_LIBS
                        parmetis librairies to use when linking
    --embed-parmetis    Embed PARMETIS libraries as static library

  Mumps library options:
    --disable-mumps     Disable MUMPS support
    --enable-mumps      Force MUMPS support
    --mumps-libs=MUMPS_LIBS
                        mumps librairies to use when linking
    --embed-mumps       Embed MUMPS libraries as static library

  Scotch library options:
    --disable-scotch    Disable SCOTCH support
    --enable-scotch     Force scotch support
    --scotch-libs=SCOTCH_LIBS
                        scotch librairies used when linking
    --embed-scotch      Embed SCOTCH libraries as static library

  Petsc library options:
    --disable-petsc     Disable PETSC support
    --enable-petsc      Force PETSC support
    --petsc-libs=PETSC_LIBS
                        petsc librairies used when linking
    --embed-petsc       Embed PETSC libraries as static library
    --disable-petsc4py  Disable PETSC4PY support
    --enable-petsc4py   Force PETSC4PY support

  Boost Options:
    --boost-includes=BOOST_INCLUDES
                        path to the directory where the boost includes are,
                        e.g., /path/to/boost_1_55_0/stage/include
    --boost-libs=BOOST_LIBS
                        path to the directory where the boost libs are,
                        e.g., path/to/boost_1_55_0/stage/lib
    --boost-mt          select multi-threaded libraries
    --boost-abi=BOOST_ABI
                        select libraries with tags (gd for debug, static is automatically added),
                        see doc Boost, Getting Started, chapter 6.1
    --boost-linkage_autodetect
                        auto-detect boost linkage options (don't get used to it / might break other stuff)
    --boost-toolset=BOOST_TOOLSET
                        force a toolset e.g. msvc, vc90,
                        gcc, mingw, mgw45 (default: auto)
    --boost-python=BOOST_PYTHON
                        select the lib python with this version
                        (default: 311)

  MFront library options:
    --disable-mfront    disable the MFRONT support
    --enable-mfront     force the MFRONT support. The TFELHOME environment variable can be used to choose
                        a prefered version.

  External programs options:
    --with-prog-gmsh    Force support of gmsh program
    --with-prog-salome  Force support of salome program
    --with-prog-run_miss3d
                        Force support of miss3d program
    --with-prog-homard  Force support of homard program
    --with-prog-ecrevisse
                        Force support of ecrevisse program
    --with-prog-xmgrace
                        Force support of xmgrace program
    --with-prog-gracebat
                        Force support of gracebat program
    --with-prog-mfront  Force support of mfront program
    --with-prog-mdump   Force support of mdump program
    --with-py-med       Force support of med python module
    --with-py-medcoupling
                        Force support of medcoupling python module
    --with-py-mpi4py    Force support of mpi4py python module

  Documentation options:
    --disable-doc       Disable documentation support.
    --enable-doc        Force documentation support.NB: The documentation build must be explicitly  called
                        by running `waf doc|doc_debug`.
    --enable-pdf        Build pdf documentation.
